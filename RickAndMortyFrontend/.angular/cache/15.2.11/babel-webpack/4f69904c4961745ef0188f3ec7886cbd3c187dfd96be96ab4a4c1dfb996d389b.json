{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class RickAndMortyService {\n  constructor(http) {\n    this.http = http;\n    this.apiBaseUrl = 'http://localhost:7103/api/rickandmorty'; //.NET backend URL\n  }\n\n  getCharacters() {\n    return this.http.get(`${this.apiBaseUrl}/characters`);\n  }\n  getCharacterById(id) {\n    return this.http.get(`${this.apiBaseUrl}/characters/${id}`);\n  }\n  static {\n    this.ɵfac = function RickAndMortyService_Factory(t) {\n      return new (t || RickAndMortyService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RickAndMortyService,\n      factory: RickAndMortyService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":";;AAOA,OAAM,MAAOA,mBAAmB;EAG9BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,eAAU,GAAG,wCAAwC,CAAC,CAAC;EAExB;;EAEvCC,aAAa;IACX,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAC,GAAG,IAAI,CAACC,UAAU,aAAa,CAAC;EACvD;EAEAC,gBAAgB,CAACC,EAAU;IACzB,OAAO,IAAI,CAACL,IAAI,CAACE,GAAG,CAAC,GAAG,IAAI,CAACC,UAAU,eAAeE,EAAE,EAAE,CAAC;EAC7D;;;uBAXWP,mBAAmB;IAAA;EAAA;;;aAAnBA,mBAAmB;MAAAQ,SAAnBR,mBAAmB;MAAAS,YAFlB;IAAM;EAAA","names":["RickAndMortyService","constructor","http","getCharacters","get","apiBaseUrl","getCharacterById","id","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\despinoza\\source\\repos\\RickAndMortyBFF\\RickAndMortyFrontend\\src\\app\\services\\rick-and-morty.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RickAndMortyService {\n  private apiBaseUrl = 'http://localhost:7103/api/rickandmorty'; //.NET backend URL\n\n  constructor(private http: HttpClient) {}\n\n  getCharacters(): Observable<any> {\n    return this.http.get(`${this.apiBaseUrl}/characters`);\n  }\n\n  getCharacterById(id: number): Observable<any> {\n    return this.http.get(`${this.apiBaseUrl}/characters/${id}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}